/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { SeededTrackedInteractionEventIdentifierDescriptionPairs } from './SeededTrackedInteractionEventIdentifierDescriptionPairs';
import {
    SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON,
    SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped,
    SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON,
} from './SeededTrackedInteractionEventIdentifierDescriptionPairs';

/**
 * This is a model that will hold relavent information in relation to an interaction(ONLY CLICK/TAP) analytics event(usage). If you want to register an event that relates to an interaction with the key then register a Keyboard Event.
 *
 * @export
 * @interface SeededTrackedInteractionEvent
 */
export interface SeededTrackedInteractionEvent {
    /**
     *
     * @type {EmbeddedModelSchema}
     * @memberof SeededTrackedInteractionEvent
     */
    schema?: EmbeddedModelSchema;
    /**
     * These need structure
     * @type {string}
     * @memberof SeededTrackedInteractionEvent
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof SeededTrackedInteractionEvent
     */
    element?: string;
    /**
     *
     * @type {SeededTrackedInteractionEventIdentifierDescriptionPairs}
     * @memberof SeededTrackedInteractionEvent
     */
    identifierDescriptionPair?: SeededTrackedInteractionEventIdentifierDescriptionPairs;
}

/**
 * Check if a given object implements the SeededTrackedInteractionEvent interface.
 */
export function instanceOfSeededTrackedInteractionEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:24 AM
 *
 * @export
 * @param {*} json
 * @returns {SeededTrackedInteractionEvent}
 */
export function SeededTrackedInteractionEventFromJSON(json: any): SeededTrackedInteractionEvent {
    return SeededTrackedInteractionEventFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:24 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {SeededTrackedInteractionEvent}
 */
export function SeededTrackedInteractionEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededTrackedInteractionEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'description': json['description'],
        'element': !exists(json, 'element') ? undefined : json['element'],
        'identifierDescriptionPair': !exists(json, 'identifier_description_pair') ? undefined : SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON(json['identifier_description_pair']),
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:24 AM
 *
 * @export
 * @param {?(SeededTrackedInteractionEvent | null)} [value]
 * @returns {*}
 */
export function SeededTrackedInteractionEventToJSON(value?: SeededTrackedInteractionEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'description': value.description,
        'element': value.element,
        'identifier_description_pair': SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON(value.identifierDescriptionPair),
    };
}

