/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QGPTAgentRoutes } from './QGPTAgentRoutes';
import {
    QGPTAgentRoutesFromJSON,
    QGPTAgentRoutesFromJSONTyped,
    QGPTAgentRoutesToJSON,
} from './QGPTAgentRoutes';
import type { QGPTQuestionOutput } from './QGPTQuestionOutput';
import {
    QGPTQuestionOutputFromJSON,
    QGPTQuestionOutputFromJSONTyped,
    QGPTQuestionOutputToJSON,
} from './QGPTQuestionOutput';
import type { QGPTRelevanceOutput } from './QGPTRelevanceOutput';
import {
    QGPTRelevanceOutputFromJSON,
    QGPTRelevanceOutputFromJSONTyped,
    QGPTRelevanceOutputToJSON,
} from './QGPTRelevanceOutput';
import type { QGPTStreamEnum } from './QGPTStreamEnum';
import {
    QGPTStreamEnumFromJSON,
    QGPTStreamEnumFromJSONTyped,
    QGPTStreamEnumToJSON,
} from './QGPTStreamEnum';

/**
 * This is the out for the /qgpt/stream endpoint.
 *
 * 200: success
 * 401: invalid authentication/api key
 * 429: Rate limit/Quota exceeded
 * 500: server had an error
 * 503: the engine is currently overloaded
 * @export
 * @interface QGPTStreamOutput
 */
export interface QGPTStreamOutput {
    /**
     * This is the id used to represent the stream of response. this will always be present. We will use the value passed inby the client, or we will generate one.
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    request?: string;
    /**
     *
     * @type {QGPTRelevanceOutput}
     * @memberof QGPTStreamOutput
     */
    relevance?: QGPTRelevanceOutput;
    /**
     *
     * @type {QGPTQuestionOutput}
     * @memberof QGPTStreamOutput
     */
    question?: QGPTQuestionOutput;
    /**
     *
     * @type {QGPTStreamEnum}
     * @memberof QGPTStreamOutput
     */
    status?: QGPTStreamEnum;
    /**
     * This is the ID of a predefined persisted conversation, if this is not present we will create a new conversation for the input/output.(in the case of a question)
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    conversation: string;
    /**
     * This will be provided
     * @type {number}
     * @memberof QGPTStreamOutput
     */
    statusCode?: number | null;
    /**
     * optional error message is the status code is NOT 200
     * @type {string}
     * @memberof QGPTStreamOutput
     */
    errorMessage?: string;
    /**
     *
     * @type {QGPTAgentRoutes}
     * @memberof QGPTStreamOutput
     */
    agentRoutes?: QGPTAgentRoutes;
}

/**
 * Check if a given object implements the QGPTStreamOutput interface.
 */
export function instanceOfQGPTStreamOutput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "conversation" in value;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:30 AM
 *
 * @export
 * @param {*} json
 * @returns {QGPTStreamOutput}
 */
export function QGPTStreamOutputFromJSON(json: any): QGPTStreamOutput {
    return QGPTStreamOutputFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:30 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {QGPTStreamOutput}
 */
export function QGPTStreamOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTStreamOutput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'request': !exists(json, 'request') ? undefined : json['request'],
        'relevance': !exists(json, 'relevance') ? undefined : QGPTRelevanceOutputFromJSON(json['relevance']),
        'question': !exists(json, 'question') ? undefined : QGPTQuestionOutputFromJSON(json['question']),
        'status': !exists(json, 'status') ? undefined : QGPTStreamEnumFromJSON(json['status']),
        'conversation': json['conversation'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'agentRoutes': !exists(json, 'agentRoutes') ? undefined : QGPTAgentRoutesFromJSON(json['agentRoutes']),
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:30 AM
 *
 * @export
 * @param {?(QGPTStreamOutput | null)} [value]
 * @returns {*}
 */
export function QGPTStreamOutputToJSON(value?: QGPTStreamOutput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'request': value.request,
        'relevance': QGPTRelevanceOutputToJSON(value.relevance),
        'question': QGPTQuestionOutputToJSON(value.question),
        'status': QGPTStreamEnumToJSON(value.status),
        'conversation': value.conversation,
        'statusCode': value.statusCode,
        'errorMessage': value.errorMessage,
        'agentRoutes': QGPTAgentRoutesToJSON(value.agentRoutes),
    };
}

