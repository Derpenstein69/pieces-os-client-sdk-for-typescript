/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Auth0 } from './Auth0';
import {
    Auth0FromJSON,
    Auth0FromJSONTyped,
    Auth0ToJSON,
} from './Auth0';
import type { ChallengedPKCE } from './ChallengedPKCE';
import {
    ChallengedPKCEFromJSON,
    ChallengedPKCEFromJSONTyped,
    ChallengedPKCEToJSON,
} from './ChallengedPKCE';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { ResultedPKCE } from './ResultedPKCE';
import {
    ResultedPKCEFromJSON,
    ResultedPKCEFromJSONTyped,
    ResultedPKCEToJSON,
} from './ResultedPKCE';
import type { RevokedPKCE } from './RevokedPKCE';
import {
    RevokedPKCEFromJSON,
    RevokedPKCEFromJSONTyped,
    RevokedPKCEToJSON,
} from './RevokedPKCE';
import type { SeededPKCE } from './SeededPKCE';
import {
    SeededPKCEFromJSON,
    SeededPKCEFromJSONTyped,
    SeededPKCEToJSON,
} from './SeededPKCE';
import type { TokenizedPKCE } from './TokenizedPKCE';
import {
    TokenizedPKCEFromJSON,
    TokenizedPKCEFromJSONTyped,
    TokenizedPKCEToJSON,
} from './TokenizedPKCE';

/**
 * An object representing all of the properties involved in a PKCE Authentication Flow
 * @export
 * @interface PKCE
 */
export interface PKCE {
    /**
     *
     * @type {EmbeddedModelSchema}
     * @memberof PKCE
     */
    schema?: EmbeddedModelSchema;
    /**
     *
     * @type {ResultedPKCE}
     * @memberof PKCE
     */
    result?: ResultedPKCE;
    /**
     *
     * @type {ChallengedPKCE}
     * @memberof PKCE
     */
    challenge?: ChallengedPKCE;
    /**
     *
     * @type {RevokedPKCE}
     * @memberof PKCE
     */
    revocation?: RevokedPKCE;
    /**
     *
     * @type {SeededPKCE}
     * @memberof PKCE
     */
    seed?: SeededPKCE;
    /**
     *
     * @type {TokenizedPKCE}
     * @memberof PKCE
     */
    token?: TokenizedPKCE;
    /**
     *
     * @type {Auth0}
     * @memberof PKCE
     */
    auth0?: Auth0;
}

/**
 * Check if a given object implements the PKCE interface.
 */
export function instanceOfPKCE(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:32 AM
 *
 * @export
 * @param {*} json
 * @returns {PKCE}
 */
export function PKCEFromJSON(json: any): PKCE {
    return PKCEFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:32 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {PKCE}
 */
export function PKCEFromJSONTyped(json: any, ignoreDiscriminator: boolean): PKCE {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'result': !exists(json, 'result') ? undefined : ResultedPKCEFromJSON(json['result']),
        'challenge': !exists(json, 'challenge') ? undefined : ChallengedPKCEFromJSON(json['challenge']),
        'revocation': !exists(json, 'revocation') ? undefined : RevokedPKCEFromJSON(json['revocation']),
        'seed': !exists(json, 'seed') ? undefined : SeededPKCEFromJSON(json['seed']),
        'token': !exists(json, 'token') ? undefined : TokenizedPKCEFromJSON(json['token']),
        'auth0': !exists(json, 'auth0') ? undefined : Auth0FromJSON(json['auth0']),
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:32 AM
 *
 * @export
 * @param {?(PKCE | null)} [value]
 * @returns {*}
 */
export function PKCEToJSON(value?: PKCE | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'result': ResultedPKCEToJSON(value.result),
        'challenge': ChallengedPKCEToJSON(value.challenge),
        'revocation': RevokedPKCEToJSON(value.revocation),
        'seed': SeededPKCEToJSON(value.seed),
        'token': TokenizedPKCEToJSON(value.token),
        'auth0': Auth0ToJSON(value.auth0),
    };
}

