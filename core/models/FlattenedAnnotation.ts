/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnnotationTypeEnum } from './AnnotationTypeEnum';
import {
    AnnotationTypeEnumFromJSON,
    AnnotationTypeEnumFromJSONTyped,
    AnnotationTypeEnumToJSON,
} from './AnnotationTypeEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
} from './FlattenedConversationMessages';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './GroupedTimestamp';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './MechanismEnum';
import type { ReferencedAnchor } from './ReferencedAnchor';
import {
    ReferencedAnchorFromJSON,
    ReferencedAnchorFromJSONTyped,
    ReferencedAnchorToJSON,
} from './ReferencedAnchor';
import type { ReferencedAsset } from './ReferencedAsset';
import {
    ReferencedAssetFromJSON,
    ReferencedAssetFromJSONTyped,
    ReferencedAssetToJSON,
} from './ReferencedAsset';
import type { ReferencedConversation } from './ReferencedConversation';
import {
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
} from './ReferencedConversation';
import type { ReferencedModel } from './ReferencedModel';
import {
    ReferencedModelFromJSON,
    ReferencedModelFromJSONTyped,
    ReferencedModelToJSON,
} from './ReferencedModel';
import type { ReferencedPerson } from './ReferencedPerson';
import {
    ReferencedPersonFromJSON,
    ReferencedPersonFromJSONTyped,
    ReferencedPersonToJSON,
} from './ReferencedPerson';
import type { ReferencedWorkstreamSummary } from './ReferencedWorkstreamSummary';
import {
    ReferencedWorkstreamSummaryFromJSON,
    ReferencedWorkstreamSummaryFromJSONTyped,
    ReferencedWorkstreamSummaryToJSON,
} from './ReferencedWorkstreamSummary';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './Score';

/**
 * This is the flattened Version of the annotation, IMPORTANT: when referencing these, ONLY Take the UUID, do NOT polinate(ie w/ asset/person/model) the FlattenedAnnotation as it can create an infinite loop.
 * @export
 * @interface FlattenedAnnotation
 */
export interface FlattenedAnnotation {
    /**
     *
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedAnnotation
     */
    schema?: EmbeddedModelSchema;
    /**
     *
     * @type {string}
     * @memberof FlattenedAnnotation
     */
    id: string;
    /**
     *
     * @type {GroupedTimestamp}
     * @memberof FlattenedAnnotation
     */
    created: GroupedTimestamp;
    /**
     *
     * @type {GroupedTimestamp}
     * @memberof FlattenedAnnotation
     */
    updated: GroupedTimestamp;
    /**
     *
     * @type {GroupedTimestamp}
     * @memberof FlattenedAnnotation
     */
    deleted?: GroupedTimestamp;
    /**
     *
     * @type {MechanismEnum}
     * @memberof FlattenedAnnotation
     */
    mechanism?: MechanismEnum;
    /**
     *
     * @type {ReferencedAsset}
     * @memberof FlattenedAnnotation
     */
    asset?: ReferencedAsset;
    /**
     *
     * @type {ReferencedPerson}
     * @memberof FlattenedAnnotation
     */
    person?: ReferencedPerson;
    /**
     *
     * @type {AnnotationTypeEnum}
     * @memberof FlattenedAnnotation
     */
    type: AnnotationTypeEnum;
    /**
     * This is the text of the annotation.
     * @type {string}
     * @memberof FlattenedAnnotation
     */
    text: string;
    /**
     *
     * @type {ReferencedModel}
     * @memberof FlattenedAnnotation
     */
    model?: ReferencedModel;
    /**
     *
     * @type {boolean}
     * @memberof FlattenedAnnotation
     */
    pseudo?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FlattenedAnnotation
     */
    favorited?: boolean;
    /**
     *
     * @type {ReferencedAnchor}
     * @memberof FlattenedAnnotation
     */
    anchor?: ReferencedAnchor;
    /**
     *
     * @type {ReferencedConversation}
     * @memberof FlattenedAnnotation
     */
    conversation?: ReferencedConversation;
    /**
     *
     * @type {Score}
     * @memberof FlattenedAnnotation
     */
    score?: Score;
    /**
     *
     * @type {FlattenedConversationMessages}
     * @memberof FlattenedAnnotation
     */
    messages?: FlattenedConversationMessages;
    /**
     *
     * @type {ReferencedWorkstreamSummary}
     * @memberof FlattenedAnnotation
     */
    summary?: ReferencedWorkstreamSummary;
}

/**
 * Check if a given object implements the FlattenedAnnotation interface.
 */
export function instanceOfFlattenedAnnotation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "text" in value;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:15 AM
 *
 * @export
 * @param {*} json
 * @returns {FlattenedAnnotation}
 */
export function FlattenedAnnotationFromJSON(json: any): FlattenedAnnotation {
    return FlattenedAnnotationFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:15 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {FlattenedAnnotation}
 */
export function FlattenedAnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedAnnotation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mechanism': !exists(json, 'mechanism') ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'asset': !exists(json, 'asset') ? undefined : ReferencedAssetFromJSON(json['asset']),
        'person': !exists(json, 'person') ? undefined : ReferencedPersonFromJSON(json['person']),
        'type': AnnotationTypeEnumFromJSON(json['type']),
        'text': json['text'],
        'model': !exists(json, 'model') ? undefined : ReferencedModelFromJSON(json['model']),
        'pseudo': !exists(json, 'pseudo') ? undefined : json['pseudo'],
        'favorited': !exists(json, 'favorited') ? undefined : json['favorited'],
        'anchor': !exists(json, 'anchor') ? undefined : ReferencedAnchorFromJSON(json['anchor']),
        'conversation': !exists(json, 'conversation') ? undefined : ReferencedConversationFromJSON(json['conversation']),
        'score': !exists(json, 'score') ? undefined : ScoreFromJSON(json['score']),
        'messages': !exists(json, 'messages') ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'summary': !exists(json, 'summary') ? undefined : ReferencedWorkstreamSummaryFromJSON(json['summary']),
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:15 AM
 *
 * @export
 * @param {?(FlattenedAnnotation | null)} [value]
 * @returns {*}
 */
export function FlattenedAnnotationToJSON(value?: FlattenedAnnotation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'asset': ReferencedAssetToJSON(value.asset),
        'person': ReferencedPersonToJSON(value.person),
        'type': AnnotationTypeEnumToJSON(value.type),
        'text': value.text,
        'model': ReferencedModelToJSON(value.model),
        'pseudo': value.pseudo,
        'favorited': value.favorited,
        'anchor': ReferencedAnchorToJSON(value.anchor),
        'conversation': ReferencedConversationToJSON(value.conversation),
        'score': ScoreToJSON(value.score),
        'messages': FlattenedConversationMessagesToJSON(value.messages),
        'summary': ReferencedWorkstreamSummaryToJSON(value.summary),
    };
}

