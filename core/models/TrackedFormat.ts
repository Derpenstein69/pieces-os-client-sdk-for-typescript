/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Classification } from './Classification';
import {
    ClassificationFromJSON,
    ClassificationFromJSONTyped,
    ClassificationToJSON,
} from './Classification';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';

/**
 * A minimal format to send to Mixpanel
 * @export
 * @interface TrackedFormat
 */
export interface TrackedFormat {
    /**
     *
     * @type {EmbeddedModelSchema}
     * @memberof TrackedFormat
     */
    schema?: EmbeddedModelSchema;
    /**
     * The UUID of the format
     * @type {string}
     * @memberof TrackedFormat
     */
    id: string;
    /**
     *
     * @type {Classification}
     * @memberof TrackedFormat
     */
    classification: Classification;
    /**
     *
     * @type {Role}
     * @memberof TrackedFormat
     */
    role: Role;
    /**
     * The UUID of the asset associated
     * @type {string}
     * @memberof TrackedFormat
     */
    asset: string;
    /**
     *
     * @type {boolean}
     * @memberof TrackedFormat
     */
    fragment: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TrackedFormat
     */
    file: boolean;
}

/**
 * Check if a given object implements the TrackedFormat interface.
 */
export function instanceOfTrackedFormat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "classification" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "asset" in value;
    isInstance = isInstance && "fragment" in value;
    isInstance = isInstance && "file" in value;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:20 AM
 *
 * @export
 * @param {*} json
 * @returns {TrackedFormat}
 */
export function TrackedFormatFromJSON(json: any): TrackedFormat {
    return TrackedFormatFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:20 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {TrackedFormat}
 */
export function TrackedFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackedFormat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'classification': ClassificationFromJSON(json['classification']),
        'role': RoleFromJSON(json['role']),
        'asset': json['asset'],
        'fragment': json['fragment'],
        'file': json['file'],
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:20 AM
 *
 * @export
 * @param {?(TrackedFormat | null)} [value]
 * @returns {*}
 */
export function TrackedFormatToJSON(value?: TrackedFormat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'classification': ClassificationToJSON(value.classification),
        'role': RoleToJSON(value.role),
        'asset': value.asset,
        'fragment': value.fragment,
        'file': value.file,
    };
}

