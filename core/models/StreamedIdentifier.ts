/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReferencedAsset } from './ReferencedAsset';
import {
    ReferencedAssetFromJSON,
    ReferencedAssetFromJSONTyped,
    ReferencedAssetToJSON,
} from './ReferencedAsset';
import type { ReferencedConversation } from './ReferencedConversation';
import {
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
} from './ReferencedConversation';

/**
 * This is currently only used within /assets/steam/identifiers && /conversations/steam/identifiers but can be used with other as well, if we want to expand this class.
 * @export
 * @interface StreamedIdentifier
 */
export interface StreamedIdentifier {
    /**
     *
     * @type {ReferencedAsset}
     * @memberof StreamedIdentifier
     */
    asset?: ReferencedAsset;
    /**
     *
     * @type {ReferencedConversation}
     * @memberof StreamedIdentifier
     */
    conversation?: ReferencedConversation;
    /**
     * This is a specific bool that will let us know if we deleted an Identifierfrom the db.
     * @type {boolean}
     * @memberof StreamedIdentifier
     */
    deleted?: boolean;
}

/**
 * Check if a given object implements the StreamedIdentifier interface.
 */
export function instanceOfStreamedIdentifier(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:23 AM
 *
 * @export
 * @param {*} json
 * @returns {StreamedIdentifier}
 */
export function StreamedIdentifierFromJSON(json: any): StreamedIdentifier {
    return StreamedIdentifierFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:23 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {StreamedIdentifier}
 */
export function StreamedIdentifierFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamedIdentifier {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'asset': !exists(json, 'asset') ? undefined : ReferencedAssetFromJSON(json['asset']),
        'conversation': !exists(json, 'conversation') ? undefined : ReferencedConversationFromJSON(json['conversation']),
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:23 AM
 *
 * @export
 * @param {?(StreamedIdentifier | null)} [value]
 * @returns {*}
 */
export function StreamedIdentifierToJSON(value?: StreamedIdentifier | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'asset': ReferencedAssetToJSON(value.asset),
        'conversation': ReferencedConversationToJSON(value.conversation),
        'deleted': value.deleted,
    };
}

