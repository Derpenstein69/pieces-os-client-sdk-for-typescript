/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkstreamPatternEngineDataCleanupRequest,
  WorkstreamPatternEngineStatus,
} from '../models/index';
import {
    WorkstreamPatternEngineDataCleanupRequestFromJSON,
    WorkstreamPatternEngineDataCleanupRequestToJSON,
    WorkstreamPatternEngineStatusFromJSON,
    WorkstreamPatternEngineStatusToJSON,
} from '../models/index';

export interface WorkstreamPatternEngineProcessorsVisionActivateRequest {
    workstreamPatternEngineStatus?: WorkstreamPatternEngineStatus;
}

export interface WorkstreamPatternEngineProcessorsVisionDataClearRequest {
    workstreamPatternEngineDataCleanupRequest?: WorkstreamPatternEngineDataCleanupRequest;
}

export interface WorkstreamPatternEngineProcessorsVisionDeactivateRequest {
    workstreamPatternEngineStatus?: WorkstreamPatternEngineStatus;
}

/**
 * 
 */
export class WorkstreamPatternEngineApi extends runtime.BaseAPI {

    /**
     * This will activate your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/activate [POST]
     */
    async workstreamPatternEngineProcessorsVisionActivateRaw(requestParameters: WorkstreamPatternEngineProcessorsVisionActivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamPatternEngineStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workstream_pattern_engine/processors/vision/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkstreamPatternEngineStatusToJSON(requestParameters.workstreamPatternEngineStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamPatternEngineStatusFromJSON(jsonValue));
    }

    /**
     * This will activate your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/activate [POST]
     */
    async workstreamPatternEngineProcessorsVisionActivate(requestParameters: WorkstreamPatternEngineProcessorsVisionActivateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamPatternEngineStatus> {
        const response = await this.workstreamPatternEngineProcessorsVisionActivateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will clear the data for the Workstream Pattern Engine, specifically for our vision data.  This boy will accept ranges of time that the user wants to remove the processing from.
     * /workstream_pattern_engine/processors/vision/data/clear [POST]
     */
    async workstreamPatternEngineProcessorsVisionDataClearRaw(requestParameters: WorkstreamPatternEngineProcessorsVisionDataClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workstream_pattern_engine/processors/vision/data/clear`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkstreamPatternEngineDataCleanupRequestToJSON(requestParameters.workstreamPatternEngineDataCleanupRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will clear the data for the Workstream Pattern Engine, specifically for our vision data.  This boy will accept ranges of time that the user wants to remove the processing from.
     * /workstream_pattern_engine/processors/vision/data/clear [POST]
     */
    async workstreamPatternEngineProcessorsVisionDataClear(requestParameters: WorkstreamPatternEngineProcessorsVisionDataClearRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamPatternEngineProcessorsVisionDataClearRaw(requestParameters, initOverrides);
    }

    /**
     * This will deactivate your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/deactivate [POST]
     */
    async workstreamPatternEngineProcessorsVisionDeactivateRaw(requestParameters: WorkstreamPatternEngineProcessorsVisionDeactivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamPatternEngineStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workstream_pattern_engine/processors/vision/deactivate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkstreamPatternEngineStatusToJSON(requestParameters.workstreamPatternEngineStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamPatternEngineStatusFromJSON(jsonValue));
    }

    /**
     * This will deactivate your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/deactivate [POST]
     */
    async workstreamPatternEngineProcessorsVisionDeactivate(requestParameters: WorkstreamPatternEngineProcessorsVisionDeactivateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamPatternEngineStatus> {
        const response = await this.workstreamPatternEngineProcessorsVisionDeactivateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will get a snapshot of the status your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/status [GET]
     */
    async workstreamPatternEngineProcessorsVisionStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamPatternEngineStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_pattern_engine/processors/vision/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamPatternEngineStatusFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of the status your Workstream Pattern Engine. This is used to aggregate information on your user\'s desktop, specifically recording the application in focus and aggregating relevant context that will then be used to ground the copilot conversations, as well as the feed.  Note: required to be a beta user to use this feature until this is live(roughly mid to late April)
     * /workstream_pattern_engine/processors/vision/status [GET]
     */
    async workstreamPatternEngineProcessorsVisionStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamPatternEngineStatus> {
        const response = await this.workstreamPatternEngineProcessorsVisionStatusRaw(initOverrides);
        return await response.value();
    }

}
