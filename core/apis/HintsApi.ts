/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Hint,
  Hints,
  SeededHint,
} from '../models/index';
import {
    HintFromJSON,
    HintToJSON,
    HintsFromJSON,
    HintsToJSON,
    SeededHintFromJSON,
    SeededHintToJSON,
} from '../models/index';

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @interface HintsCreateNewHintRequest
 * @typedef {HintsCreateNewHintRequest}
 */
export interface HintsCreateNewHintRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {?SeededHint}
 */
seededHint?: SeededHint;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @interface HintsDeleteSpecificHintRequest
 * @typedef {HintsDeleteSpecificHintRequest}
 */
export interface HintsDeleteSpecificHintRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {string}
 */
hint: string;
}

/**
 *
 */
export class HintsApi extends runtime.BaseAPI {

    /**
     * This will create a hint.
     * /hints/create [POST]
     */
    async hintsCreateNewHintRaw(requestParameters: HintsCreateNewHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hints/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededHintToJSON(requestParameters.seededHint),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will create a hint.
     * /hints/create [POST]
     */
    async hintsCreateNewHint(requestParameters: HintsCreateNewHintRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hint> {
        const response = await this.hintsCreateNewHintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will delete a specific hint.
     * /hints/{hint}/delete [POST]
     */
    async hintsDeleteSpecificHintRaw(requestParameters: HintsDeleteSpecificHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hint === null || requestParameters.hint === undefined) {
            throw new runtime.RequiredError('hint','Required parameter requestParameters.hint was null or undefined when calling hintsDeleteSpecificHint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hints/{hint}/delete`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific hint.
     * /hints/{hint}/delete [POST]
     */
    async hintsDeleteSpecificHint(requestParameters: HintsDeleteSpecificHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hintsDeleteSpecificHintRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of all of the hints.
     * /hints [GET]
     */
    async hintsSnapshotRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hints>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintsFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the hints.
     * /hints [GET]
     */
    async hintsSnapshot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hints> {
        const response = await this.hintsSnapshotRaw(initOverrides);
        return await response.value();
    }

}
