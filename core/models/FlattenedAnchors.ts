/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { ReferencedAnchor } from './ReferencedAnchor';
import {
    ReferencedAnchorFromJSON,
    ReferencedAnchorFromJSONTyped,
    ReferencedAnchorToJSON,
} from './ReferencedAnchor';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './Score';

/**
 * 
 * @export
 * @interface FlattenedAnchors
 */
export interface FlattenedAnchors {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedAnchors
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<ReferencedAnchor>}
     * @memberof FlattenedAnchors
     */
    iterable: Array<ReferencedAnchor>;
    /**
     * This is a Map<String, int> where the the key is an Anchor id.
     * @type {{ [key: string]: number; }}
     * @memberof FlattenedAnchors
     */
    indices?: { [key: string]: number; };
    /**
     * 
     * @type {Score}
     * @memberof FlattenedAnchors
     */
    score?: Score;
}

/**
 * Check if a given object implements the FlattenedAnchors interface.
 */
export function instanceOfFlattenedAnchors(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iterable" in value;

    return isInstance;
}

export function FlattenedAnchorsFromJSON(json: any): FlattenedAnchors {
    return FlattenedAnchorsFromJSONTyped(json, false);
}

export function FlattenedAnchorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedAnchors {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(ReferencedAnchorFromJSON)),
        'indices': !exists(json, 'indices') ? undefined : json['indices'],
        'score': !exists(json, 'score') ? undefined : ScoreFromJSON(json['score']),
    };
}

export function FlattenedAnchorsToJSON(value?: FlattenedAnchors | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'iterable': ((value.iterable as Array<any>).map(ReferencedAnchorToJSON)),
        'indices': value.indices,
        'score': ScoreToJSON(value.score),
    };
}

