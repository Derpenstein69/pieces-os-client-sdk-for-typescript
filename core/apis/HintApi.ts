/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Hint,
  SeededScoreIncrement,
} from '../models/index';
import {
    HintFromJSON,
    HintToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @interface HintScoresIncrementRequest
 * @typedef {HintScoresIncrementRequest}
 */
export interface HintScoresIncrementRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {string}
 */
hint: string;
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {?SeededScoreIncrement}
 */
seededScoreIncrement?: SeededScoreIncrement;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @interface HintSpecificHintSnapshotRequest
 * @typedef {HintSpecificHintSnapshotRequest}
 */
export interface HintSpecificHintSnapshotRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {string}
 */
hint: string;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @interface HintUpdateRequest
 * @typedef {HintUpdateRequest}
 */
export interface HintUpdateRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @type {?Hint}
 */
hint?: Hint;
}

/**
 *
 */
export class HintApi extends runtime.BaseAPI {

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/hint/{hint}/scores/increment\' [POST]
     */
    async hintScoresIncrementRaw(requestParameters: HintScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hint === null || requestParameters.hint === undefined) {
            throw new runtime.RequiredError('hint','Required parameter requestParameters.hint was null or undefined when calling hintScoresIncrement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hint/{hint}/scores/increment`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters.seededScoreIncrement),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/hint/{hint}/scores/increment\' [POST]
     */
    async hintScoresIncrement(requestParameters: HintScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hintScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of a specific hint.
     * /hint/{hint} [POST]
     */
    async hintSpecificHintSnapshotRaw(requestParameters: HintSpecificHintSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hint>> {
        if (requestParameters.hint === null || requestParameters.hint === undefined) {
            throw new runtime.RequiredError('hint','Required parameter requestParameters.hint was null or undefined when calling hintSpecificHintSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hint/{hint}`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific hint.
     * /hint/{hint} [POST]
     */
    async hintSpecificHintSnapshot(requestParameters: HintSpecificHintSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hint> {
        const response = await this.hintSpecificHintSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will update a specific hint.
     * /hint/update [POST]
     */
    async hintUpdateRaw(requestParameters: HintUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hint/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HintToJSON(requestParameters.hint),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will update a specific hint.
     * /hint/update [POST]
     */
    async hintUpdate(requestParameters: HintUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hint> {
        const response = await this.hintUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
