/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Applications } from './Applications';
import {
    ApplicationsFromJSON,
    ApplicationsFromJSONTyped,
    ApplicationsToJSON,
} from './Applications';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
} from './FlattenedAnchors';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
} from './FlattenedAssets';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
} from './FlattenedConversations';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
} from './FlattenedPersons';
import type { FlattenedRanges } from './FlattenedRanges';
import {
    FlattenedRangesFromJSON,
    FlattenedRangesFromJSONTyped,
    FlattenedRangesToJSON,
} from './FlattenedRanges';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
} from './FlattenedWebsites';
import type { FlattenedWorkstreamEvents } from './FlattenedWorkstreamEvents';
import {
    FlattenedWorkstreamEventsFromJSON,
    FlattenedWorkstreamEventsFromJSONTyped,
    FlattenedWorkstreamEventsToJSON,
} from './FlattenedWorkstreamEvents';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
} from './Model';
import type { SeededAnnotation } from './SeededAnnotation';
import {
    SeededAnnotationFromJSON,
    SeededAnnotationFromJSONTyped,
    SeededAnnotationToJSON,
} from './SeededAnnotation';

/**
 * This is a seeded version of a WorkstreamSummary
 * @export
 * @interface SeededWorkstreamSummary
 */
export interface SeededWorkstreamSummary {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededWorkstreamSummary
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {FlattenedWorkstreamEvents}
     * @memberof SeededWorkstreamSummary
     */
    events?: FlattenedWorkstreamEvents;
    /**
     * 
     * @type {string}
     * @memberof SeededWorkstreamSummary
     */
    name: string;
    /**
     * 
     * @type {Array<SeededAnnotation>}
     * @memberof SeededWorkstreamSummary
     */
    annotations?: Array<SeededAnnotation>;
    /**
     * 
     * @type {FlattenedRanges}
     * @memberof SeededWorkstreamSummary
     */
    ranges?: FlattenedRanges;
    /**
     * 
     * @type {Model}
     * @memberof SeededWorkstreamSummary
     */
    model: Model;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof SeededWorkstreamSummary
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof SeededWorkstreamSummary
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof SeededWorkstreamSummary
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof SeededWorkstreamSummary
     */
    conversations?: FlattenedConversations;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof SeededWorkstreamSummary
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {Applications}
     * @memberof SeededWorkstreamSummary
     */
    applications?: Applications;
}

/**
 * Check if a given object implements the SeededWorkstreamSummary interface.
 */
export function instanceOfSeededWorkstreamSummary(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "model" in value;

    return isInstance;
}

export function SeededWorkstreamSummaryFromJSON(json: any): SeededWorkstreamSummary {
    return SeededWorkstreamSummaryFromJSONTyped(json, false);
}

export function SeededWorkstreamSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededWorkstreamSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'events': !exists(json, 'events') ? undefined : FlattenedWorkstreamEventsFromJSON(json['events']),
        'name': json['name'],
        'annotations': !exists(json, 'annotations') ? undefined : ((json['annotations'] as Array<any>).map(SeededAnnotationFromJSON)),
        'ranges': !exists(json, 'ranges') ? undefined : FlattenedRangesFromJSON(json['ranges']),
        'model': ModelFromJSON(json['model']),
        'websites': !exists(json, 'websites') ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'anchors': !exists(json, 'anchors') ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'assets': !exists(json, 'assets') ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'conversations': !exists(json, 'conversations') ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'persons': !exists(json, 'persons') ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'applications': !exists(json, 'applications') ? undefined : ApplicationsFromJSON(json['applications']),
    };
}

export function SeededWorkstreamSummaryToJSON(value?: SeededWorkstreamSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'events': FlattenedWorkstreamEventsToJSON(value.events),
        'name': value.name,
        'annotations': value.annotations === undefined ? undefined : ((value.annotations as Array<any>).map(SeededAnnotationToJSON)),
        'ranges': FlattenedRangesToJSON(value.ranges),
        'model': ModelToJSON(value.model),
        'websites': FlattenedWebsitesToJSON(value.websites),
        'anchors': FlattenedAnchorsToJSON(value.anchors),
        'assets': FlattenedAssetsToJSON(value.assets),
        'conversations': FlattenedConversationsToJSON(value.conversations),
        'persons': FlattenedPersonsToJSON(value.persons),
        'applications': ApplicationsToJSON(value.applications),
    };
}

