/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';

/**
 * A model that Generates A PKCE Challenge Object with the needed requirements.
 * @export
 * @interface ChallengedPKCE
 */
export interface ChallengedPKCE {
    /**
     *
     * @type {EmbeddedModelSchema}
     * @memberof ChallengedPKCE
     */
    schema?: EmbeddedModelSchema;
    /**
     * An opaque value the clients adds to the initial request that Auth0 includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks.
     * @type {string}
     * @memberof ChallengedPKCE
     */
    state: string;
    /**
     * A local key that is held as the comparator to state, thus they should be the same.
     * @type {string}
     * @memberof ChallengedPKCE
     */
    nonce: string;
    /**
     * Generated challenge from the code_verifier.
     * @type {string}
     * @memberof ChallengedPKCE
     */
    challenge: string;
    /**
     * Method used to generate the challenge. The PKCE spec defines two methods, S256 and plain, however, Auth0 supports only S256 since the latter is discouraged.
     * @type {string}
     * @memberof ChallengedPKCE
     */
    method: ChallengedPKCEMethodEnum;
    /**
     * Cryptographically random key that was used to generate the code_challenge passed to /authorize.
     * @type {string}
     * @memberof ChallengedPKCE
     */
    verifier: string;
}


/**
 * @export
 */
export const ChallengedPKCEMethodEnum = {
    S256: 'S256'
} as const;
/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @typedef {ChallengedPKCEMethodEnum}
 */
export type ChallengedPKCEMethodEnum = typeof ChallengedPKCEMethodEnum[keyof typeof ChallengedPKCEMethodEnum];


/**
 * Check if a given object implements the ChallengedPKCE interface.
 */
export function instanceOfChallengedPKCE(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "challenge" in value;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "verifier" in value;

    return isInstance;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @param {*} json
 * @returns {ChallengedPKCE}
 */
export function ChallengedPKCEFromJSON(json: any): ChallengedPKCE {
    return ChallengedPKCEFromJSONTyped(json, false);
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @param {*} json
 * @param {boolean} ignoreDiscriminator
 * @returns {ChallengedPKCE}
 */
export function ChallengedPKCEFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChallengedPKCE {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'state': json['state'],
        'nonce': json['nonce'],
        'challenge': json['challenge'],
        'method': json['method'],
        'verifier': json['verifier'],
    };
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:12 AM
 *
 * @export
 * @param {?(ChallengedPKCE | null)} [value]
 * @returns {*}
 */
export function ChallengedPKCEToJSON(value?: ChallengedPKCE | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'state': value.state,
        'nonce': value.nonce,
        'challenge': value.challenge,
        'method': value.method,
        'verifier': value.verifier,
    };
}

