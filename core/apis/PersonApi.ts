/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Person,
  SeededScoreIncrement,
} from '../models/index';
import {
    PersonFromJSON,
    PersonToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

export interface PersonAssociateWorkstreamSummaryRequest {
    person: string;
    workstreamSummary: string;
}

export interface PersonDisassociateWorkstreamSummaryRequest {
    person: string;
    workstreamSummary: string;
}

export interface PersonScoresIncrementRequest {
    person: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface PersonSnapshotRequest {
    person: string;
    transferables?: boolean;
}

export interface UpdatePersonRequest {
    transferables?: boolean;
    person?: Person;
}

/**
 * 
 */
export class PersonApi extends runtime.BaseAPI {

    /**
     * This will associate a person with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /person/{person}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async personAssociateWorkstreamSummaryRaw(requestParameters: PersonAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personAssociateWorkstreamSummary.');
        }

        if (requestParameters.workstreamSummary === null || requestParameters.workstreamSummary === undefined) {
            throw new runtime.RequiredError('workstreamSummary','Required parameter requestParameters.workstreamSummary was null or undefined when calling personAssociateWorkstreamSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/person/{person}/workstream_summaries/associate/{workstream_summary}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters.workstreamSummary))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a person with a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /person/{person}/workstream_summaries/associate/{workstream_summary} [POST]
     */
    async personAssociateWorkstreamSummary(requestParameters: PersonAssociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personAssociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate an person from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /person/{person}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async personDisassociateWorkstreamSummaryRaw(requestParameters: PersonDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personDisassociateWorkstreamSummary.');
        }

        if (requestParameters.workstreamSummary === null || requestParameters.workstreamSummary === undefined) {
            throw new runtime.RequiredError('workstreamSummary','Required parameter requestParameters.workstreamSummary was null or undefined when calling personDisassociateWorkstreamSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/person/{person}/workstream_summaries/disassociate/{workstream_summary}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters.workstreamSummary))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate an person from a workstream summary. This will do the same thing as the workstreamSummary equivalent.
     * /person/{person}/workstream_summaries/disassociate/{workstream_summary} [POST]
     */
    async personDisassociateWorkstreamSummary(requestParameters: PersonDisassociateWorkstreamSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personDisassociateWorkstreamSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/person/{person}/scores/increment\' [POST]
     */
    async personScoresIncrementRaw(requestParameters: PersonScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personScoresIncrement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/person/{person}/scores/increment`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters.seededScoreIncrement),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/person/{person}/scores/increment\' [POST]
     */
    async personScoresIncrement(requestParameters: PersonScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of a specific person
     * /person/{person} [GET]
     */
    async personSnapshotRaw(requestParameters: PersonSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/person/{person}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific person
     * /person/{person} [GET]
     */
    async personSnapshot(requestParameters: PersonSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.personSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will update a specific person
     * /person/update [POST]
     */
    async updatePersonRaw(requestParameters: UpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/person/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters.person),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * This will update a specific person
     * /person/update [POST]
     */
    async updatePerson(requestParameters: UpdatePersonRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.updatePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
