/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Asset,
  Assets,
  Backup,
  BackupStatus,
  BackupStreamedProgress,
} from '../models/index';
import {
    AssetFromJSON,
    AssetToJSON,
    AssetsFromJSON,
    AssetsToJSON,
    BackupFromJSON,
    BackupToJSON,
    BackupStatusFromJSON,
    BackupStatusToJSON,
    BackupStreamedProgressFromJSON,
    BackupStreamedProgressToJSON,
} from '../models/index';

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupRequest
 * @typedef {BackupRequest}
 */
export interface BackupRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {?Assets}
 */
assets?: Assets;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupAssetRequest
 * @typedef {BackupAssetRequest}
 */
export interface BackupAssetRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {?Asset}
 */
asset?: Asset;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupRestoreSpecificBackupRequest
 * @typedef {BackupRestoreSpecificBackupRequest}
 */
export interface BackupRestoreSpecificBackupRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {?Backup}
 */
backup2?: Backup;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupRestoreSpecificBackupStreamedRequest
 * @typedef {BackupRestoreSpecificBackupStreamedRequest}
 */
export interface BackupRestoreSpecificBackupStreamedRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {?Backup}
 */
backup2?: Backup;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupSpecificBackupSnapshotRequest
 * @typedef {BackupSpecificBackupSnapshotRequest}
 */
export interface BackupSpecificBackupSnapshotRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupSpecificCreationCancelRequest
 * @typedef {BackupSpecificCreationCancelRequest}
 */
export interface BackupSpecificCreationCancelRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupSpecificCreationStatusRequest
 * @typedef {BackupSpecificCreationStatusRequest}
 */
export interface BackupSpecificCreationStatusRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupSpecificRestorationCancelRequest
 * @typedef {BackupSpecificRestorationCancelRequest}
 */
export interface BackupSpecificRestorationCancelRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {?Backup}
 */
backup2?: Backup;
}

/**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @export
 * @interface BackupSpecificRestorationStatusRequest
 * @typedef {BackupSpecificRestorationStatusRequest}
 */
export interface BackupSpecificRestorationStatusRequest {
    /**
 * ${1:Description placeholder}
 * @date 4/12/2024 - 4:03:13 AM
 *
 * @type {string}
 */
backup: string;
}

/**
 *
 */
export class BackupApi extends runtime.BaseAPI {

    /**
     *
     * /backup [POST]
     */
    async backupRaw(requestParameters: BackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/backup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetsToJSON(requestParameters.assets),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *
     * /backup [POST]
     */
    async backup(requestParameters: BackupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupRaw(requestParameters, initOverrides);
    }

    /**
     * /backup/asset [POST]
     */
    async backupAssetRaw(requestParameters: BackupAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/backup/asset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters.asset),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * /backup/asset [POST]
     */
    async backupAsset(requestParameters: BackupAssetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupAssetRaw(requestParameters, initOverrides);
    }

    /**
     * Given a backup identifier version_timestamp.  we will restore a given backup from the cloud and override your local database!!!  NOTE!!!! This will NOT sync, ie all local snippets will get replaced with the restored database.
     * /backup/{backup}/restore [POST]
     */
    async backupRestoreSpecificBackupRaw(requestParameters: BackupRestoreSpecificBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backup>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupRestoreSpecificBackup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/backup/{backup}/restore`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupToJSON(requestParameters.backup2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupFromJSON(jsonValue));
    }

    /**
     * Given a backup identifier version_timestamp.  we will restore a given backup from the cloud and override your local database!!!  NOTE!!!! This will NOT sync, ie all local snippets will get replaced with the restored database.
     * /backup/{backup}/restore [POST]
     */
    async backupRestoreSpecificBackup(requestParameters: BackupRestoreSpecificBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backup> {
        const response = await this.backupRestoreSpecificBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This take a local database and ensure that it is backed up to the cloud.  NOTE: This is a streamed version of the /backups/create. and Since the Generator is unable to generate a streamed endpoint. this is a place holder, and will need to be implemented isolated from the code generator.
     * /backup/{backup}/restore/streamed [POST]
     */
    async backupRestoreSpecificBackupStreamedRaw(requestParameters: BackupRestoreSpecificBackupStreamedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupStreamedProgress>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupRestoreSpecificBackupStreamed.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/backup/{backup}/restore/streamed`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupToJSON(requestParameters.backup2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupStreamedProgressFromJSON(jsonValue));
    }

    /**
     * This take a local database and ensure that it is backed up to the cloud.  NOTE: This is a streamed version of the /backups/create. and Since the Generator is unable to generate a streamed endpoint. this is a place holder, and will need to be implemented isolated from the code generator.
     * /backup/{backup}/restore/streamed [POST]
     */
    async backupRestoreSpecificBackupStreamed(requestParameters: BackupRestoreSpecificBackupStreamedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupStreamedProgress> {
        const response = await this.backupRestoreSpecificBackupStreamedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will just get the metadata associated with a specific backup.
     * /backup/{backup} [GET]
     */
    async backupSpecificBackupSnapshotRaw(requestParameters: BackupSpecificBackupSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backup>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupSpecificBackupSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backup/{backup}`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupFromJSON(jsonValue));
    }

    /**
     * This will just get the metadata associated with a specific backup.
     * /backup/{backup} [GET]
     */
    async backupSpecificBackupSnapshot(requestParameters: BackupSpecificBackupSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backup> {
        const response = await this.backupSpecificBackupSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This is Going to cancel a create backup (streamed) or not streamed that is currently in progress.  This will throw a 500 if there is not a backup in progress.  TODO: ADD mofe DESCRIPITON To this.
     * /backup/{backup}/creation/cancel [POST]
     */
    async backupSpecificCreationCancelRaw(requestParameters: BackupSpecificCreationCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupSpecificCreationCancel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backup/{backup}/creation/cancel`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is Going to cancel a create backup (streamed) or not streamed that is currently in progress.  This will throw a 500 if there is not a backup in progress.  TODO: ADD mofe DESCRIPITON To this.
     * /backup/{backup}/creation/cancel [POST]
     */
    async backupSpecificCreationCancel(requestParameters: BackupSpecificCreationCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupSpecificCreationCancelRaw(requestParameters, initOverrides);
    }

    /**
     * TODO add a description:
     * /backup/{backup}/creation/status [GET]
     */
    async backupSpecificCreationStatusRaw(requestParameters: BackupSpecificCreationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupStatus>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupSpecificCreationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backup/{backup}/creation/status`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupStatusFromJSON(jsonValue));
    }

    /**
     * TODO add a description:
     * /backup/{backup}/creation/status [GET]
     */
    async backupSpecificCreationStatus(requestParameters: BackupSpecificCreationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupStatus> {
        const response = await this.backupSpecificCreationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will cancel a Restoration that is in progress and restore to the original database.  Note: if there is not a restore in progress we will return a 500.  TODO add
     * /backup/{backup}/restoration/cancel [POST]
     */
    async backupSpecificRestorationCancelRaw(requestParameters: BackupSpecificRestorationCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupSpecificRestorationCancel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/backup/{backup}/restoration/cancel`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupToJSON(requestParameters.backup2),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will cancel a Restoration that is in progress and restore to the original database.  Note: if there is not a restore in progress we will return a 500.  TODO add
     * /backup/{backup}/restoration/cancel [POST]
     */
    async backupSpecificRestorationCancel(requestParameters: BackupSpecificRestorationCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupSpecificRestorationCancelRaw(requestParameters, initOverrides);
    }

    /**
     * TODO add a description:
     * /backup/{backup}/restoration/status [GET]
     */
    async backupSpecificRestorationStatusRaw(requestParameters: BackupSpecificRestorationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupStatus>> {
        if (requestParameters.backup === null || requestParameters.backup === undefined) {
            throw new runtime.RequiredError('backup','Required parameter requestParameters.backup was null or undefined when calling backupSpecificRestorationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backup/{backup}/restoration/status`.replace(`{${"backup"}}`, encodeURIComponent(String(requestParameters.backup))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupStatusFromJSON(jsonValue));
    }

    /**
     * TODO add a description:
     * /backup/{backup}/restoration/status [GET]
     */
    async backupSpecificRestorationStatus(requestParameters: BackupSpecificRestorationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupStatus> {
        const response = await this.backupSpecificRestorationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
